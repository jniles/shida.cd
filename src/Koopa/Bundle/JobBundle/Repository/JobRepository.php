<?php

namespace Koopa\Bundle\JobBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;
use Doctrine\ORM\Query\Parameter;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Koopa\Bundle\JobBundle\Entity\Job;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends EntityRepository
{
    /**
     * @param $userId
     * @return array
     */
    public function fetchAllByUser($userId, $getQuery = false)
    {
        $query = $this->_em
            ->createQuery(
                "SELECT j, u, l, sk, sc, ss
                FROM KoopaJobBundle:Job j
                LEFT JOIN j.user u
                JOIN j.locations l
                JOIN j.skills sk
                JOIN j.subCategories sc
                LEFT JOIN j.subscriptions ss
                WHERE j.user = :userId
                GROUP BY j.id
                ORDER BY j.createdAt DESC"
            )->setParameters(array(
                'userId' => $userId
            ));

        if ($getQuery) {
            return $query;
        }

        return $query->getResult();
    }

    /**
     * @param boolean
     * @return array
     */
    public function fetchAll($getQuery = false)
    {
        $query = $this->_em
            ->createQuery(
                "SELECT j, u, l, sk, sc, ss
                FROM KoopaJobBundle:Job j
                LEFT JOIN j.user u
                JOIN j.locations l
                JOIN j.skills sk
                JOIN j.subCategories sc
                LEFT JOIN j.subscriptions ss
                WHERE j.active = :active
                GROUP BY j.id
                ORDER BY j.createdAt DESC"
            )->setParameters(array(
            'active' => true,));

        if ($getQuery) {
            return $query;
        }

        return $query->getResult();
    }

    /**
     * @param boolean $getQuery
     * @return array
     */
    public function all($getQuery = false)
    {
        $query = $this->_em
            ->createQuery(
                "SELECT j, u, l, sk, sc, ss
                FROM KoopaJobBundle:Job j
                LEFT JOIN j.user u
                JOIN j.locations l
                JOIN j.skills sk
                JOIN j.subCategories sc
                LEFT JOIN j.subscriptions ss
                GROUP BY j.id
                ORDER BY j.createdAt DESC"
            );

        if ($getQuery) {
            return $query;
        }

        return $query->getResult();
    }

    /**
     * @param array $params
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @internal param string $slug
     */
    public function fetchByUser(array $params)
    {
        $query = $this->_em
            ->createQuery(
                "SELECT j, u, l, sk, sc, ss
                FROM KoopaJobBundle:Job j
                LEFT JOIN j.user u
                LEFT JOIN j.locations l
                LEFT JOIN j.skills sk
                LEFT JOIN j.subCategories sc
                LEFT JOIN j.subscriptions ss
                WHERE j.slug = :slug"
            )->setParameters($params);

        return $query->getOneOrNullResult();
    }

    /**
     * @param string $slug
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function fetch($slug)
    {
        $query = $this->_em
            ->createQuery(
                "SELECT j, u, l, sk, sc, ss
                FROM KoopaJobBundle:Job j
                LEFT JOIN j.user u
                JOIN j.locations l
                JOIN j.skills sk
                JOIN j.subCategories sc
                LEFT JOIN j.subscriptions ss
                WHERE j.active = :active
                AND j.slug = :slug"
            )->setParameters(new ArrayCollection(array(
                new Parameter('active', true),
                new Parameter('slug', $slug),
            )));

        return $query->getOneOrNullResult();
    }

    public function search(array $category, array $town, $getQuery = false)
    {
        $query = $this->_em->createQuery('
            SELECT j, c, l
            FROM KoopaJobBundle:Job j
            JOIN j.subCategories c
            JOIN j.locations l
            WHERE (c.name IN (?1)
            OR l.town IN (?2))
            AND (j.active = true)
        ')->setParameter(1, $category)->setParameter(2, $town);

        if ($getQuery) {
            return $query;
        }

        return $query->getResult();
    }
}
